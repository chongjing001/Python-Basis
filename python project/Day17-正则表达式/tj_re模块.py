import re

"""
1. compile
compile(正则表达式) - 将正则表达式转换成正则表达式对象
"""

re_str = "\d{3}"
re_obj = re.compile(re_str)
# 调用模块中的函数
print(re.fullmatch(re_str, "123"))
# 调用对象方法
print(re_obj.fullmatch("123"))

"""
2. match 和 fullmatch
a.fullmatch(正则表达式，字符串) - 完全匹配，从字符串开头匹配到字符串结束
b.match(正则表达式，字符串)  - 不完全匹配，只匹配字符串开头

匹配成功返回匹配对象那个，匹配失败返回None

匹配对象
1.获取span - 匹配到的内容范围，(开始下标，结束下标)，结束下标取不到
匹配对象.span()  - 获取整个正则表达式匹配到的范围
匹配对象.span(n) - 获取正则表达式中第n个分组匹配到的范围（前提是有分组）

2.start 和 end - 获取匹配结果的开始下标和结束下标
匹配对象.start()/匹配对象.end() - 获取整个正则表达式匹配到的开始下标/结束下标
匹配对象.start(n)/end(n) - 获取正则表达式中第n个分组匹配到的开始下标/结束下标


3.group - 获取匹配到的内容
匹配对象.group() - 获取整个正则表达式匹配到的内容
匹配对象.group(n) - 获取整个正则表达式第n个分组匹配到的内容

4.string - 获取被匹配的原字符串
匹配对象.string
"""

"""
3.search

search(正则表达式，字符串) - 匹配字符串中第一个满足正则表达式的字串，如果匹配成功】
返回匹配对象，否则返回None
"""

"""
4.split
split(正则表达式,字符串) - 在字符串中按照满足正则表达式的字串对字符串进行切割
"""

str1 = "fdfdf457fdfd6fdfdfdf4dfdfd5656fdf"
result = re.split(r"\d+", str1)
print(result)

"""
5 sub
sub(正则表达式,新子串，字符串) - 用新字串替换字符串中满足正则表达式的子串，
返回一个替换后的字符串

"""


"""
6 findall
findapp(正则表达式,字符串) - 在字符串中获取满足正则表达式的所有字符，返回一个列表
列表元素式字符串
注意：如果这个正则表达式中有一个分组，结果是列表中那个分组匹配到的结果
         如果这个正则表达式中分组的个数大于1，结果是一个列表，列表中的元素式元组，
         元组中是每个分组匹配到的内容
"""

"""
finditer(正则表达式,字符串) - 获取字符串中满足正则表达式的内容，返回的是一个迭代器
迭代器中的元素式匹配对象
"""

# 思考：写一个自己的finditer





