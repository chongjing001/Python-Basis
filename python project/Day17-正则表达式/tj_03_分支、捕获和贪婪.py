import re

"""
# 1.分支
条件1 | 条件2  - 匹配条件1或者条件2 
\d{2} | [a-z] - 匹配两个数字或者一个小写字母
注意：正则中的分支也会出现短路，当条件1可以匹配，就不会使用提哦案件2进行判断
"""
# 练习：所有的数包括正负和0

re_str = r"[+-]?[1-9]\d*[.]?\d*|[+-]0[.]\d*|0"
result = re.fullmatch(re_str, "0")
print(result)

"""
2 () - 捕获和分组
a. 分组 - 将括号的内容作为一个整体
"""

"""
b.捕获
re.findall(正则表达式，字符串) - 在字符串中去获取正则表达式条件的所有的子串，返回一个列表
通过正则获取符合条件的字串的时候，可以在正则表达式中加括号，匹配后只获取括号里面的内容
"""

"""
c.重复匹配
带多个分组的正则表达式中可以分组的后面通过添加"\数字"来重复前面第几个分组中匹配到的内容

说明：\数字 - 代表前面第几个分组；\1：的一个分组  \2:第二个分组
"""
re_str = r"\d{3}([a-z]{2})a\1"
print(re.fullmatch(re_str, "123abaab"))


"""
3. 贪婪
匹配次数后加?  例： *?  +?  ??   {M,N}?    {M}?  表示尽可能少的重复 
"""


"""
4 转义符号
在正则表达式中可以在有特殊意义或者特殊功能的符号前加\来取消其特殊功能
\\w - 代表两个字符，分别是"\" 和w
\+ - 代表+字符
\* - 代表*字符
\? - 代表?字符
[] 、() 、{}、表示字符的时候，前面也要加\

注意：在中括号中，\必须加\表示\本身,^在最前面加\表示^本身，
- 在两个字符之间加\表示-本身
"""



re_str = r"\\w-\d{3}"


