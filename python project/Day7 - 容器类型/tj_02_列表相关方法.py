


# 1.列表赋值
"""
a.直接使用一个列表给另一个列表赋值，赋的是地址
  赋完值之后，对其中一个赋值，会改变另一个列表
b.如果赋值的时候赋的是列表的切片或者拷贝，会产生新的地址。然后使用新的地址赋值
  赋完值后，两个列表互不影响
"""
list1 = [1, 2, 3]
list2 = list1
list2.append(66)
print(list1)

list3 = list1[:]
list3.append(100)
print(list3)


# 1.count
"""
1.列表.count(元素) - 获取指定元素在列表中出现的次数
"""
nums = [1, 23, 45, 56, 5, 45]
print(nums.count(45))
# 2. 列表.extend(序列) - 将列表中所有元素都添加到列表中


"""
3.列表.index(元素) - 获取指定元素的下标
注意：a.如果元素有多个，只去的一个的下标
     b.如果元素不存在，会报错
"""

# 4.列表.reverse() - 反向列表（将列表元素倒序）
nums = [1, 5, 45, 8, 2, 9, 2, 59]
nums.reverse()
print(nums)

"""
5.列表.sort() - 对列表进行升序排序（从小到大）
列表.sort(rever=True) - 对列表进行降序排列（从大到小）
注意：列表的要求：a.列表的元素类型必须一样 b.元素支持比较运算符

"""
nums.sort()
print(nums)
nums.sort(reverse=True)
print(nums)

"""
6. 列表.clear() - 清空列表
注意：清空列表尽量使用clear()
"""


"""
7.列表.copy - 将列表中元素直接赋值一份产生一个新的列表
  和列表.[:]效果一样
  注意：这里的是浅拷贝
"""
list1 = [1, 2, 3]
list2 = list1.copy()
print(list2)
print(list1 is list2)

"""
什么时候使用字典：
如果一个容器里面储存的数据是不同意义的数据（数据之间需要区分）就使用字典
"""