


"""
1.数据本地化
将数据以文件的形式，储存到本地磁盘中
（程序中保存的数据都是存到内存中的，当程序运行结束内存中的数据会销毁）

常见的数据本地化方式：二进制文件（包含音频、视频、压缩包），普通文本文件
                   json和xml文件，数据库文件


2.文件操作（读和写）
文件操作的固定步骤：打开文件（新建文件） - 文件操作（读和写） - 关闭文件


3.打开文件
open(file, mode='r',...,encoding = None)  - 返回的是被打开的文件对象
file - 字符串；需要打开文件的路径
       绝对路径：一般不建议使用
       相对路径：（相对当前的py文件对应的目录）
                aaa.txt 或者 ./aaa.txt 、../aaa.txt
                ./ : 代表当前目录（可以省略）
                ../:代表当前目录的上级目录
mode - 打开方式；打开文件后不同的操作，对应的打开方式不一样
      'r' - 以只读的方式打开
      'w' - 以写的方式打开
      'rb'/'br' - 以读的方式打开，读出来的数据是二进制
      'wb'/'bw' - 以写的方式打开，写出来的数据是二进制
      'a' - 以写的方式打开，追加
      '+' - 以读写方式打开

encoding - 文本文件编码方式，一般赋值为'utf-8'
           utf-8 - 支持中文编码
           gbk - 不支持中文编码


4.文件的读操作
文件对象.read() - 从文件读写位置开始读到文件结尾（获取文件中所有的内容）
文件.readline() - 读一行内容

5.文件的写操作
文件对象.write(字符串) - 将字符串的内容写到文件中
'w' - 完全覆盖
'a' - 末尾追加内容

6.关闭文件
文件对象.close() - 关闭指定的文件
"""


read1 = open('README','r',encoding='utf-8')

# print(read1.read())
file1 = read1.readline()
# for _ in range(6):
#     print(file1)

while file1:
    print(file1)
    file1 = read1.readline()
read1 = open('README','w',encoding='utf-8')
read1.write("我写......")
read1 = open('README','a',encoding='utf-8')
read1.write("我再写...")

"""
文件不存在
当以读的方式一个不存在的文件，会报错
当以写的方式打开一个不存在的文件，不会报错，并且会创建文件
"""









